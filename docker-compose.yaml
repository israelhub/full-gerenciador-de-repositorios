version: "3.9"

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: gerenciador-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gerenciador_contatos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gerenciador-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gerenciador_contatos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gerenciador-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/gerenciador_contatos
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_SECRET: your-super-secret-refresh-jwt-key-here-change-in-production
      JWT_REFRESH_EXPIRES_IN: 30d
      PORT: 8000
      RUN_SEEDS: "true"
      ENABLE_SWAGGER: "true"
      CORS_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - gerenciador-network

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gerenciador-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gerenciador-network

volumes:
  postgres_data:
    driver: local

networks:
  gerenciador-network:
    driver: bridge
